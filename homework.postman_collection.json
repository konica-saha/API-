{
	"info": {
		"_postman_id": "bbcc6187-f17d-48cd-b374-9200f4f217ca",
		"name": "homework",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28550927",
		"_collection_link": "https://planetary-rocket-918678.postman.co/workspace/work~82539099-bec9-4a10-b31b-34c66c0369cc/collection/28550927-bbcc6187-f17d-48cd-b374-9200f4f217ca?action=share&source=collection_link&creator=28550927"
	},
	"item": [
		{
			"name": "create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status = pm.response.code;\r",
							"pm.environment.get(\"variable_key\");\r",
							"\r",
							"switch (status) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"        console.log(jsonData);\r",
							"        console.log(jsonData.bookingid);\r",
							"\r",
							"        pm.environment.set(\"id\", jsonData.bookingid);\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"First name validation\", function () {\r",
							"            pm.expect(jsonData.booking.firstname).to.equal(pm.environment.get(\"Firstname\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Last name validation\", function () {\r",
							"            pm.expect(jsonData.booking.lastname).to.equal(pm.environment.get(\"Lastname\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Totalprice validation\", function () {\r",
							"            pm.expect(jsonData.booking.totalprice).to.equal(parseInt(pm.environment.get(\"Totalprice\")));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Depositpaid validation\", function () {\r",
							"            pm.expect(jsonData.booking.depositpaid).to.equal(Boolean(pm.environment.get(\"Depositpaid\")));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Check in validation\", function () {\r",
							"            pm.expect(jsonData.booking.bookingdates.checkin).to.equal(pm.environment.get(\"Checkin\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Check out validation\", function () {\r",
							"            pm.expect(jsonData.booking.bookingdates.checkout).to.equal(pm.environment.get(\"Checkout\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Additional needs validation\", function () {\r",
							"            pm.expect(jsonData.booking.additionalneeds).to.equal(pm.environment.get(\"Additionalneeds\"));\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Status code is 404\", function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad URL\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized\");\r",
							"        break;\r",
							"\r",
							"    case 402:\r",
							"        pm.test(\"Payment Required\");\r",
							"        break;\r",
							"\r",
							"    case 405:\r",
							"        pm.test(\"Method Not Allowed\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\");\r",
							"        break;\r",
							"    case 501:\r",
							"        pm.test(\"Not Implemented\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gate Way\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Server Unavailable\");\r",
							"        break;\r",
							"    default:\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"Firstname :\" +firstname)\r",
							"pm.environment.set(\"Firstname\", firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Lastname :\" +lastname)\r",
							"pm.environment.set(\"Lastname\",lastname)\r",
							"\r",
							"var Totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"totalprice :\" +Totalprice)\r",
							"pm.environment.set(\"Totalprice\",Totalprice)\r",
							"\r",
							"var Depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(\"depositpaid :\" +Depositpaid)\r",
							"pm.environment.set(\"Depositpaid\",Depositpaid)\r",
							"\r",
							"var num = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"const moment = require ('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"Checkin\",today.add(num,'d').add(num,'M').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var num = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"const momentout = require ('moment')\r",
							"const toda = momentout()\r",
							"pm.environment.set(\"Checkout\",toda.add(num,'d').add(num,'M').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"console.log(\"Additionalneeds :\" +additionalneeds)\r",
							"pm.environment.set(\"Additionalneeds\", additionalneeds)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{Firstname}}\",\r\n\t\"lastname\" : \"{{Lastname}}\",\r\n\t\"totalprice\" : \"{{Totalprice}}\",\r\n\t\"depositpaid\" : \"{{Depositpaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{Checkin}}\",\r\n    \t\"checkout\" : \"{{Checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{Additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/booking/"
			},
			"response": []
		},
		{
			"name": "get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status = pm.response.code\r",
							"switch(status){\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"First name validation\", function(){\r",
							"            pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"Firstname\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Last name validation\", function(){\r",
							"            pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"Lastname\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Totalprice validation\", function(){\r",
							"            pm.expect(jsonData.totalprice).to.equal(parseInt(pm.environment.get(\"Totalprice\")));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Depositpaid validation\", function(){\r",
							"            pm.expect(jsonData.depositpaid).to.equal(Boolean(pm.environment.get(\"Depositpaid\")));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Check in validation\", function(){\r",
							"            pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"Checkin\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Check out validation\", function(){\r",
							"            pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"Checkout\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Additional needs validation\", function(){\r",
							"            pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"Additionalneeds\"));\r",
							"        });\r",
							"\r",
							"               break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Status code is 404\", function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"        break;\r",
							"      case 404:\r",
							"        pm.test(\"Not found\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad URL\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized\");\r",
							"        break;\r",
							"\r",
							"    case 402:\r",
							"        pm.test(\"Payment Required\");\r",
							"        break;\r",
							"\r",
							"    case 405:\r",
							"        pm.test(\"Method Not Allowed\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\");\r",
							"        break;\r",
							"    case 501:\r",
							"        pm.test(\"Not Implemented\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gate Way\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Server Unavailable\");\r",
							"        break;\r",
							"    default:\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/booking/{{id}}"
			},
			"response": []
		},
		{
			"name": "token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/auth"
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(\"Firstname :\" +firstname)\r",
							"pm.environment.set(\"Firstname\", firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(\"Lastname :\" +lastname)\r",
							"pm.environment.set(\"Lastname\",lastname)\r",
							"\r",
							"var Totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"totalprice :\" +Totalprice)\r",
							"pm.environment.set(\"Totalprice\",Totalprice)\r",
							"\r",
							"var Depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"console.log(\"depositpaid :\" +Depositpaid)\r",
							"pm.environment.set(\"Depositpaid\",Depositpaid)\r",
							"\r",
							"var num = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"const moment = require ('moment')\r",
							"const today = moment()\r",
							"pm.environment.set(\"Checkin\",today.add(num,'d').add(num,'M').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var num = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"const momentout = require ('moment')\r",
							"const toda = momentout()\r",
							"pm.environment.set(\"Checkout\",toda.add(num,'d').add(num,'M').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"console.log(\"Additionalneeds :\" +additionalneeds)\r",
							"pm.environment.set(\"Additionalneeds\", additionalneeds)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status = pm.response.code\r",
							"switch(status){\r",
							"    case 200:\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('First name validation', function () {\r",
							"    pm.expect(jsonData.firstname).to.equal(pm.environment.get('Firstname'));\r",
							"});\r",
							"\r",
							"pm.test('Last name validation', function () {\r",
							"    pm.expect(jsonData.lastname).to.equal(pm.environment.get('Lastname'));\r",
							"});\r",
							"\r",
							"pm.test('Totalprice validation', function () {\r",
							"    pm.expect(jsonData.totalprice).to.equal(parseInt(pm.environment.get('Totalprice')));\r",
							"});\r",
							"\r",
							"pm.test(\"Depositpaid validation\", function(){\r",
							"    pm.expect(jsonData.depositpaid).to.equal(Boolean(pm.environment.get(\"Depositpaid\")))\r",
							"})\r",
							"\r",
							"pm.test('Check in validation', function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get('Checkin'));\r",
							"});\r",
							"\r",
							"pm.test('Check out validation', function () {\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get('Checkout'));\r",
							"});\r",
							"\r",
							"pm.test('Additional needs validation', function () {\r",
							"    pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get('Additionalneeds'));\r",
							"});\r",
							"       break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Status code is 404\", function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"        break;\r",
							"      case 404:\r",
							"        pm.test(\"Not found\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad URL\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized\");\r",
							"        break;\r",
							"\r",
							"    case 402:\r",
							"        pm.test(\"Payment Required\");\r",
							"        break;\r",
							"\r",
							"    case 405:\r",
							"        pm.test(\"Method Not Allowed\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\");\r",
							"        break;\r",
							"    case 501:\r",
							"        pm.test(\"Not Implemented\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gate Way\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Server Unavailable\");\r",
							"        break;\r",
							"    default:\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{Firstname}}\",\r\n\t\"lastname\" : \"{{Lastname}}\",\r\n\t\"totalprice\" : \"{{Totalprice}}\",\r\n\t\"depositpaid\" : \"{{Depositpaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{Checkin}}\",\r\n    \t\"checkout\" : \"{{Checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{Additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/booking/{{id}}"
			},
			"response": []
		},
		{
			"name": "verify update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"switch(pm.response.code){\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"Status code is 200\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"First name validation\", function(){\r",
							"            pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"Firstname\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Last name validation\", function(){\r",
							"            pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"Lastname\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Totalprice validation\", function(){\r",
							"            pm.expect(jsonData.totalprice).to.equal(parseInt(pm.environment.get(\"Totalprice\")));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Depositpaid validation\", function(){\r",
							"            pm.expect(jsonData.depositpaid).to.equal(Boolean(pm.environment.get(\"Depositpaid\")));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Check in validation\", function(){\r",
							"            pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"Checkin\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Check out validation\", function(){\r",
							"            pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"Checkout\"));\r",
							"        });\r",
							"\r",
							"        pm.test(\"Additional needs validation\", function(){\r",
							"            pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"Additionalneeds\"));\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Status code is 404\", function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"        break;\r",
							"      case 404:\r",
							"        pm.test(\"Not found\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad URL\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized\");\r",
							"        break;\r",
							"\r",
							"    case 402:\r",
							"        pm.test(\"Payment Required\");\r",
							"        break;\r",
							"\r",
							"    case 405:\r",
							"        pm.test(\"Method Not Allowed\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error\");\r",
							"        break;\r",
							"    case 501:\r",
							"        pm.test(\"Not Implemented\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gate Way\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Server Unavailable\");\r",
							"        break;\r",
							"    default:\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/booking/{{id}}"
			},
			"response": []
		},
		{
			"name": "Delete",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/booking/{{id}}"
			},
			"response": []
		}
	]
}